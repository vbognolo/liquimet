{% extends 'layout.twig' %}
{% block title %} Piattaforma {{ 'now'|date('Y') }} {% endblock %}
{% block head %}
    {# Bootstrap Datepicker - CSS #}
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.min.css" 
        integrity="sha256-siyOpF/pBWUPgIcQi17TLBkjvNgNQArcmwJB8YvkAgg=" crossorigin="anonymous">
{% endblock %}
  
{% block content %} 
    {% include 'transports-navigation.twig' %}

<section class="col-12 m-auto">
    <div class="d-flex justify-content-center table-responsive">          
        <table class="table table-hover table-light table-stripped caption-top text-center platform" id="transport-table">
            <caption class="px-3 mb-2 text-white text-shadow-dark" style="font-size: 1.9rem"> 
                <span>
                    <i class="bi bi-arrow-bar-right my-1 fs-3"></i> 
                        TRASPORTI PARZIALI
                </span>
            </caption>

            <thead>
                <tr class="border-top border-light bg-primary bg-gradient table-title">
                    <th scope="col" class="align-middle px-3"> # </th>
                    <th scope="col" class="align-middle px-2"> Slot ID </th>
                    <th scope="col" class="align-middle px-2"> Numero CMR </th>
                    <th scope="col" class="align-middle px-3"> Emittente </th>
                    <th scope="col" class="align-middle px-3"> Fornitore </th>
                    <th scope="col" class="align-middle px-3"> Trasporto </th>
                    <th scope="col" class="align-middle px-3"> Univoco </th>
                    <th scope="col" class="align-middle px-2"> Data carico </th>
                    <th scope="col" class="align-middle px-2"> Data scarico </th>
                    <th scope="col" class="align-middle"> Mese carico </th>
                    <th scope="col" class="align-middle"> Settimana scarico </th>
                    <th scope="col" class="align-middle"> Mese scarico </th>
                    <th scope="col" class="align-middle px-2"> Container<br>ATB </th>
                    <th scope="col" class="align-middle px-2"> <i class="bi bi-gear"></i> </th>
                </tr>
            </thead>

            {# Include transport-part-ajax.twig for tbody and tfoot #}
            {% include 'transports-part-ajax.twig' %}

            
        </table>
    </div>  
</section>  
<input type="hidden" name="csrf_token" value="{{ csrf_token }}">
    {% include 'transport-modal.twig' %}
{% endblock %}
 
{% block jquery %}
<script src="https://code.jquery.com/jquery-3.7.1.min.js" 
        integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" 
        crossorigin="anonymous">
</script>
    {# JQuery Validation #}
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.21.0/jquery.validate.min.js" 
        integrity="sha256-umbTaFxP31Fv6O1itpLS/3+v5fOAWDLOUzlmvOGaKV4=" 
        crossorigin="anonymous">
</script>
    {# JQuery Validation Additional Methods #}
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.21.0/additional-methods.min.js" 
        integrity="sha256-MtEA819Zls6dtLt5S5BpEMOhifPyz7gfzfgtNtY75lE=" 
        crossorigin="anonymous">
</script>
{% endblock %}

{% block datepicker %}
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js" 
        integrity="sha256-bqVeqGdJ7h/lYPq6xrPv/YGzMEb6dNxlfiTUHSgRCp8=" 
        crossorigin="anonymous">
</script>
{% endblock %}

{% block page_script %}
<script>
$(document).ready(function () {
//  Transport edit button, open modal with populated transports's data
    $(document).on('click', '.updateTrans', function () {
        const id = $(this).data('id');
        const csrfToken = $('input[name="csrf_token"]').val(); // grab the token from a hidden input

        $.post('get-transport', { action: 'getTransportData', id_transport: id, csrf_token: csrfToken }, function (response) {
            if (response.success) {
                const transport = response.transport;

                    $('#editTransModal #id_transport').val(transport.id_transport);
                    $('#editTransModal #slot').val(transport.slot.toUpperCase());
                    $('#editTransModal #cmr').val(transport.cmr.toUpperCase());
                    $('#editTransModal #issuer').val(transport.issuer.toUpperCase());
                    $('#editTransModal #supplier').val(transport.supplier.toUpperCase());
                    $('#editTransModal #transport').val(transport.transport.toUpperCase());
                    $('#editTransModal #date_load').val(transport.date_load);
                    $('#editTransModal #date_unload').val(transport.date_unload);
                    $('#editTransModal #container').val(transport.container.toUpperCase());

                    /*$('#editTransModal #original_slot').val(transport.slot);
                    $('#editTransModal #original_cmr').val(transport.cmr);*/

                    $('#editTransModal').modal('show');
            } else {
                alert(response.message || 'Errore durante il caricamento dei dati.');
            }
        }, 'json');
    });

//  Quantity edit button, open modal with populated quantity's data
    $(document).on('click', '.updateQty', function () {
        const id = $(this).data('id');
        const csrfToken = $('input[name="csrf_token"]').val(); 

        $.post('get-quantity', { action: 'getQuantityData', id_transport: id, csrf_token: csrfToken }, function (response) {
            if (response.success) {
                const quantity = response.quantity;

                    $('#editQtyModal #id_transport').val(quantity.id_transport);
                    $('#editQtyModal #id_quantity').val(quantity.id_quantity);
                    $('#editQtyModal #kg_load').val(quantity.kg_load);
                    $('#editQtyModal #cooling').val(quantity.cooling);
                    $('#editQtyModal #price_typology').val(quantity.price_typology);
                    $('#editQtyModal #price_value').val(quantity.price_value);
                    $('#editQtyModal #kg_unload').val(quantity.kg_unload);
                    $('#editQtyModal #liquid_density').val(quantity.liquid_density);
                    $('#editQtyModal #gas_weight').val(quantity.gas_weight);
                    $('#editQtyModal #pcs_ghv').val(quantity.pcs_ghv);

                    $('#editQtyModal').modal('show');
            } else {
                alert(response.message || 'Errore durante il caricamento dei dati.');
            }
        }, 'json');
    });

//  Partial edit button, open modal with populated partial's data
    $(document).on('click', '.updatePart', function () {
        const id = $(this).data('id');
        const csrfToken = $('input[name="csrf_token"]').val(); 

        $.post('get-partial', { action: 'getPartialData', id_partial: id, csrf_token: csrfToken }, function (response) {
            if (response.success) {
                const partial = response.partial;

                    $('#editPartModal #id_partial').val(partial.id_partial);
                    $('#editPartModal #destination').val(partial.destination);
                    $('#editPartModal #exw').val('').trigger('change'); // Reset
                    $('#editPartModal #exw').val(partial.exw).trigger('change');
                    $('#editPartModal #date').val(partial.date);
                    $('#editPartModal #place').val(partial.place);
                    $('#editPartModal #q_unloaded').val(partial.q_unloaded);
                    $('#editPartModal #invoice').val(partial.invoice);

                    // Optional: Reset validation errors
                    $('#partial-edit .is-invalid').removeClass('is-invalid');
                    $('#partial-edit .invalid-feedback').remove();

                    $('#editPartModal').modal('show');
            } else {
                alert(response.message || 'Errore durante il caricamento dei dati.');
            }
        }, 'json');
    });

//  Delete transport button
    $(document).on('click', '.deleteTrans', function () {
        const id = $(this).data('id');
        const slot = $(this).data('slot');
        const csrfToken = $('input[name="csrf_token"]').val(); 

        $("#deleteTransModal #id_transport").val(id);
        $("#deleteTransModal #slot-placeholder").text(slot);

        /*$.post('transport-delete', { action: '', id_transport: id, csrf_token: csrfToken }, function (response) {
            if (response.success) {

            } else {
                alert(response.message || 'Errore durante il caricamento dei dati.');
            }
        }, 'json');*/
    });

//  Note edit button
    $('.notes').each(function () {
        const container = $(this);
        const id = container.data('ids');
        const csrfToken = $('input[name="csrf_token"]').val(); 

        $.post('get-note', { action: 'getTransportNotes', id_transport: id, csrf_token: csrfToken }, function (response) {
            if (response.success && response.notes.length > 0) {
                let html = '';
                response.notes.forEach(n => {
                    html += `<span class="d-inline-block me-2" data-bs-toggle="tooltip" title="Scritto da ${n.author} il ${n.created}">
                                ${n.content}
                            </span> <br>`;
                });
                container.html(html);
                container.find('[data-bs-toggle="tooltip"]').tooltip();
            } else {
                container.html('<div class="text-muted">Nessuna nota.</div>');
            }
        }, 'json');
    });

//  Notes edit button, open modal with populated quantity's data
    $(document).on('click', '.updateNote', function () {
        const id = $(this).data('id');
        const csrfToken = $('input[name="csrf_token"]').val(); 

        $.post('get-note', { action: 'getTransportNotes', id_transport: id, csrf_token: csrfToken }, function (response) {
            if (response.success) {
                const notes = response.notes;

                $('#editNoteModal #id_transport').val(id);
                $('#editNoteModal #id_note').val(notes.id_note);
                $('#editNoteModal #note').val(notes.map(n => n.content).join(' '));

                $('#editNoteModal').modal('show');
            } else {
                alert(response.message || 'Errore durante il caricamento dei dati.');
            }
        }, 'json');
    });

//  Load table content by pagination
    function loadPage(page = 1, type = 'P') {
        const csrfToken = $('input[name="csrf_token"]').val();  

        $.ajax({
            type: 'POST',
            url: 'transport-pagination',  
            data: {
                page: page,
                csrf_token: csrfToken,
                type: type
            },
            success: function (html) {
                // Extract full tbody and tfoot tags from returned HTML
                const tbody = $(html).filter('tbody').html() || $(html).find('tbody').html();
                const tfoot = $(html).filter('tfoot').html() || $(html).find('tfoot').html();

                // Replace the table body and footer
                $('#partials-tbody').html(tbody);
                $('#partials-tfoot').html(tfoot);
            },
            error: function(jqXHR, textStatus, errorThrown) {
                alert('Error loading page data: ' + textStatus + ' - ' + errorThrown + '\n' + jqXHR.responseText);
            }
        });
    }

    //  Handle click on pagination links dynamically
    $(document).on('click', '.transport-page', function (e) {
        e.preventDefault();
        const page = $(this).data('page');

            if (page) {
                loadPage(page);
                $('html, body').animate({scrollTop: $('#transport-table').offset().top}, 300);
            }
    });
});
</script>
{% endblock %}